{"version":3,"sources":["logo.svg","components/SearchBox.js","components/MovieComp.js","model/MovieModel.js","pages/MoviesPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","props","state","searchText","handleInputChange","bind","handleSelection","ev","newSearchText","target","value","this","setState","onSearchChange","onSelectedResult","parseInt","getAttribute","searchPlaceholder","results","listGroupItems","map","result","index","ListGroup","Item","key","data-index","action","onClick","className","Form","Control","type","placeholder","onChange","Component","MovieComp","movie","Card","Img","variant","src","posterURL","Body","Title","title","runtime","firstMainStars","secondMainStars","thirdMainStars","director","MovieModel","relativePosterURL","id","MoviesPage","movieSearchResults","movieSearchResultStrings","movies","searchMovies","addMovie","searchURL","Axios","get","then","response1","data","details","credits","promise1","promise2","promises","Promise","all","responses","movieDetailsResult","movieCreditsResult","cast","name","i","crew","length","department","newMovie","poster_path","concat","movieComp","Col","md","Container","Badge","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0ab7bd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport { Form, ListGroup } from 'react-bootstrap';\nimport './SearchBox.css';\n\n\n\n// Props\n// searchPlaceholder. a string for the placeholder to show in the search input\n// results. an array of results that the componenet will render\n// onSearchChange. callback function to parent notifying that the search text has changed\n// onSelectedResult. callback function to parent notifying on the selected result (index from the results prop)\n// State\n// searchText\nexport default class SearchBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchText: \"\"\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSelection = this.handleSelection.bind(this);\n    }\n\n    handleInputChange(ev) {\n        const newSearchText = ev.target.value\n\n        this.setState({\n            searchText: newSearchText\n        });\n\n        this.props.onSearchChange(newSearchText);\n    }\n\n    handleSelection(ev) {\n        this.props.onSelectedResult(parseInt(ev.target.getAttribute(\"data-index\")));\n        this.setState({\n            searchText: \"\"\n        })\n    }\n\n    render() {\n        const { searchPlaceholder, results } = this.props;\n        const { searchText } = this.state;\n\n        const listGroupItems = results.map((result, index) => <ListGroup.Item key={index} data-index={index} action onClick={this.handleSelection}>{result}</ListGroup.Item>);\n        \n        // let listGroupItems = [];\n        // for (var i = 0; i < results.length; i++) {\n        //     listGroupItems.push(<ListGroup.Item>{results[i]}</ListGroup.Item>)\n        // }\n\n        return (\n            <div className=\"search-box\">\n                <Form.Control type=\"text\" placeholder={searchPlaceholder} value={searchText} onChange={this.handleInputChange}/>\n                <ListGroup className=\"search-results\">\n                    {listGroupItems}\n                </ListGroup>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./MovieComp.css\";\n\n// Props\n// actor. an instance of ActorModel\nexport default class MovieComp extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { movie } = this.props;\n\n    return (\n      <div>\n        <Card>\n          <Card.Img variant=\"top\" src={movie.posterURL} />\n          <Card.Body>\n            <Card.Title>\n              <span className=\"titles\">Title : </span>\n              {\"  \" + movie.title},\n              <br />\n              <span className=\"titles\">Length :</span>{\" \"}\n              {\"  \" + movie.runtime + \" \"} minutes,\n              <br /> <span className=\"titles\">Actor 1st :</span>\n              {\"  \" + movie.firstMainStars}, <br />\n              <span className=\"titles\">Actor 2nd :</span>\n              {\"  \" + movie.secondMainStars}\n              <br />\n              <span className=\"titles\"> Actor 3th :</span>\n              {\"  \" + movie.thirdMainStars}.\n              <br />\n              <span className=\"titles\">Director :</span>\n              {\"  \" + movie.director}\n            </Card.Title>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n","export default class MovieModel {\n  constructor(\n    title,\n    relativePosterURL,\n    id,\n    runtime,\n    firstMainStars,\n    secondMainStars,\n    thirdMainStars,\n    director\n  ) {\n    this.title = title;\n    this.posterURL = \"https://image.tmdb.org/t/p/w500\" + relativePosterURL;\n    this.id = id;\n    this.runtime = runtime;\n    this.firstMainStars = firstMainStars;\n    this.secondMainStars = secondMainStars;\n    this.thirdMainStars = thirdMainStars;\n    this.director = director;\n  }\n}\n","import React, { Component } from \"react\";\nimport SearchBox from \"../components/SearchBox\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport MovieComp from \"../components/MovieComp\";\nimport MovieModel from \"../model/MovieModel\";\nimport Axios from \"axios\";\n\nexport default class MoviesPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movieSearchResults: [],\n      movieSearchResultStrings: [],\n      movies: []\n    };\n\n    this.searchMovies = this.searchMovies.bind(this);\n    this.addMovie = this.addMovie.bind(this);\n  }\n\n  searchMovies(searchText) {\n    if (searchText === \"\") {\n      this.setState({\n        movieSearchResults: [],\n        movieSearchResultStrings: []\n      });\n    } else {\n      const searchURL =\n        \"https://api.themoviedb.org/3/search/movie?api_key=77cc9523668c3dd019a1c3282e7b7141&query=\" +\n        searchText;\n\n      Axios.get(searchURL).then(response1 => {\n        this.setState({\n          movieSearchResults: response1.data.results,\n          movieSearchResultStrings: response1.data.results.map(\n            result => result.title\n          )\n        });\n      });\n    }\n  }\n\n  async addMovie(index) {\n    const details =\n      \"https://api.themoviedb.org/3/movie/\" +\n      this.state.movieSearchResults[index].id +\n      \"/credits?api_key=77cc9523668c3dd019a1c3282e7b7141&language=en-US\";\n    const credits =\n      \"https://api.themoviedb.org/3/movie/\" +\n      this.state.movieSearchResults[index].id +\n      \"?api_key=77cc9523668c3dd019a1c3282e7b7141&language=en-US\";\n    const promise1 = await Axios.get(details);\n    const promise2 = await Axios.get(credits);\n    const promises = [promise1, promise2];\n    Promise.all(promises).then(responses => {\n      this.setState({\n        movieDetailsResult: promises[1].data.runtime,\n        movieCreditsResult: promises[0].data.cast[0].name\n      });\n    });\n    // Here I could call another function from TMDB to get additional actor data\n\n    // var director = promises[0].data.crew.map(person => {\n    //   if (person.department === \"Directing\") {\n    //     return (person.name + \" , \");\n    //   }\n    // });\n\n    var director = \"\";\n    for (let i = 0; i < promises[0].data.crew.length; i++) {\n      if (promises[0].data.crew[i].department === \"Directing\") {\n        //director.replace(\".\", \"  , \");\n        director = promises[0].data.crew[i].name + \" .\";\n        break;\n      }\n    }\n    const newMovie = new MovieModel(\n      this.state.movieSearchResults[index].title,\n      this.state.movieSearchResults[index].poster_path,\n      this.state.movieSearchResults[index].id,\n      promises[1].data.runtime,\n      promises[0].data.cast[0].name,\n      promises[0].data.cast[1].name,\n      promises[0].data.cast[2].name,\n      director\n    );\n\n    this.setState({\n      movies: this.state.movies.concat(newMovie),\n      movieSearchResults: [],\n      movieSearchResultStrings: [],\n      movieDetailsResult: []\n    });\n  }\n\n  render() {\n    const { movieSearchResultStrings, movies } = this.state;\n\n    const movieComp = movies.map((movie, index) => (\n      <Col md={4} key={index}>\n        <MovieComp movie={movie} />\n      </Col>\n    ));\n\n    return (\n      <div>\n        <Container>\n          <h1>\n            <Badge variant=\"success\" className=\"m-2 text-center\">\n              Searcing Movies to get details in TMDB{\" \"}\n            </Badge>\n          </h1>\n          <SearchBox\n            searchPlaceholder=\"Search Movie\"\n            results={movieSearchResultStrings}\n            onSearchChange={this.searchMovies}\n            onSelectedResult={this.addMovie}\n          />\n          <Row>{movieComp}</Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MoviesPage from \"./pages/MoviesPage\";\n\nfunction App() {\n  return <MoviesPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}